[XOn("Ethereum")]
public class Profile : XModel("SocialNetwork")
{
    [NotParameter]
    public bytes32 Id;

    public address PublicKey;

    public string FirstName;

    public string LastName;

    public string Email;

    public int Mobile;

    public string Description;
}

[XOn("Ethereum")]
public class Post : XModel("SocialNetwork")
{
    [NotParameter]
    public bytes32 Id;

    public address Author;

    public string Content;
    
    public int Timestamp;

    public int Likes;

    public bool IsVisible;
}

[XOn("Ethereum)]
public class SocialNetwork
{
    mapping(address => bool) public registeredUsers;
    mapping(address => Profile) public userProfiles;
    mapping(address => bytes32[]) public userPosts;
    mapping(bytes32 => Post) public posts;
    
    public void Register(Profile profile)
    {
        @XOn("Ethereum", profile)
        {
            assert(!registeredUsers[msg.sender]);
            assert(address(msg.sender).balance >= 1);
            
            bytes32 id = keccak256(abi.encodePacked(msg.sender, profile.FirstName, profile.LastName, profile.Email, profile.Mobile, profile.Description, now));
            Profile memory profile = Profile(id, msg.sender, profile.FirstName, profile.LastName, profile.Email, profile.Mobile, profile.Description);
            registeredUsers[msg.sender] = true;
            userProfiles[msg.sender] = profile;
        }
    }

    public Profile GetProfile(address publicKey)
    {
        @XOn("Ethereum", publicKey)
        {
            assert(registeredUsers[publicKey]);
        
            Profile memory profile = userProfiles[publicKey];
            return(profile.Id, profile.FirstName, profile.LastName, profile.Email, profile.Mobile, profile.Description);
        }
    }

    public void EditProfile(Profile profile)
    {
        @XOn("Ethereum", profile)
        {
            assert(registeredUsers[msg.sender]);
        
            bytes32 newId = keccak256(abi.encodePacked(msg.sender, firstName, lastName, email, mobile, description, now));
            
            Profile memory profile = userProfiles[msg.sender];
            profile.id = newId;
            profile.firstName = profile.FirstName;
            profile.lastName = profile.LastName;
            profile.email = profile.Email;
            profile.mobile = profile.Mobile;
            profile.description = profile.Description;
            
            userProfiles[msg.sender] = profile;
        }
    }

    public void AddPost(Post post)
    {
        @XOn("Ethereum", post)
        {
            assert(registeredUsers[msg.sender]);
        
            uint256 timestamp = now;
            bytes32 id = keccak256(abi.encodePacked(msg.sender, post.Content, post.Timestamp));
            Post memory post = Post(id, msg.sender, post.Content, post.Timestamp, 0, true);
            
            userPosts[msg.sender].push(id);
            posts[id] = post;
        }
    }

    public Post GetPost(int id)
    {
        @XOn("Ethereum", id)
        {
            Post memory post = posts[id];
            assert(post.IsVisible);
            return(post.Author, post.Content, post.Likes);
        }
    }

    public IEnumerable<string> GetUserPosts(address publicKey)
    {
        @XOn("Ethereum", publicKey)
        {
            return userPosts[publicKey];
        }
    }

    public void EditPost(Post post)
    {
        @XOn("Ethereum", post)
        {
            Post memory post = posts[id];
            assert(post.Author == msg.sender);
            post.Content = content;
            
            bytes32 newId = keccak256(abi.encodePacked(post.Author, post.Content, post.Timestamp, post.Likes));
            post.id = newId;
            
            posts[newId].isVisible = false;
            userPosts[msg.sender].push(newId);
            posts[newId] = post;
        }
    }

    public void DeletePost(int id)
    {
        @XOn("Ethereum", id)
        {
            assert(posts[id].Author == msg.sender);
            assert(posts[id].IsVisible);
            posts[id].IsVisible = false;
        }
    }

    public void LikePost(int id)
    {
        @XOn("Ethereum", id)
        {
            assert(posts[id].IsVisible);
            posts[id].Likes++;
        }
    }
}