[XAll()]
public class Profile : XModel("SocialNetwork")
{
    [XAll()]
    public int Id;

    [XAll()]
    public Bytes32 Hash;

    [XOn("Desktop")]
    public string Username;

    [XOn("Desktop")]
    public string FirstName;

    [XOn("Desktop")]
    public string LastName;

    [XOn("Desktop")]
    public string Email;

    [XOn("Desktop")]
    public int Mobile;

    [XOn("Desktop")]
    public string Description;
}

[XAll()]
public class Post : XModel("SocialNetwork")
{
    [XAll()]
    public int Id;

    [XAll()]
    public Bytes32 Hash;

    [XOn("Desktop")]
    public Address Author;

    [XOn("Desktop")]
    public string Content;
    
    [XOn("Desktop")]
    public long Timestamp;

    [XOn("Desktop")]
    public int Likes;

    [XOn("Desktop")]
    public bool IsVisible;
}

[XAll()]
public class SocialNetwork
{
    //mapping(int => Profile) public profiles;
    //mapping(int => Post) public posts;
    
    [XOn("Desktop")]
    public IPaymentPortal _paymentPortal { get; set; }

    [XOn("Desktop")]
    public SocialNetwork(IPaymentPortal paymentPortal)
    {
        _paymentPortal = paymentPortal ?? throw new ArgumentNullException(nameof(paymentPortal));
    }
    
    [XOn("Desktop")]
    public void Register(Profile profile)
    {
        bool exists = IsUsernamePresentQuery<bool>.Execute(new {profile.Username});
        if(!exists)
        {
            _paymentPortal.ProcessPayment(profile.Username);
            var id = InsertProfileCommand.Execute(new
            {
                profile.Username,
                profile.FirstName,
                profile.LastName,
                profile.Email,
                profile.Mobile,
                profile.Description
            });

            var hash = profile.Hash();
            AddProfileHash(id, hash);
        }
    }

    public void AddProfileHash(int id, Bytes32 hash)
    {
        ~@XOn("Desktop"){}
        
        @XOn("Ethereum", id, hash)
        {
            Profile profile = Profile(id, hash);
            profiles[id] = profile;
        }
    }

    [XOn("Desktop")]
    public Profile GetProfile(int id)
    {
        var profile = GetProfileQuery<Profile>.Execute(new {Id = id});
        profile.Hash = GetProfileHash();
        return profile;
    }

    public Bytes32 GetProfileHash(int id)
    {
        ~@XOn("Desktop"){}
        
        return @XOn("Ethereum", id)
        {
            Profile profile = profiles[id];
            return(profile.Hash);
        }
    }

    [XOn("Desktop")]
    public void EditProfile(Profile profile)
    {
        bool exists = IsUsernamePresentQuery<bool>.Execute(new {profile.Username});
        if(exists)
        {
            UpdateProfileCommand.Execute(new
            {
                profile.Id,
                profile.Username,
                profile.FirstName,
                profile.LastName,
                profile.Email,
                profile.Mobile,
                profile.Description
            });

            var hash = profile.Hash();
            EditProfileHash(profile.Id, hash);
        }
    }

    public void EditProfileHash(int id, Bytes32 hash)
    {
        ~@XOn("Desktop"){}

        @XOn("Ethereum", id, hash)
        {
            Profile profile = profiles[id];
            profile.Hash = hash;
            profiles[id] = profile;
        }
    }

    [XOn("Desktop")]
    public void AddPost(Post post)
    {
        bool exists = IsUsernamePresentQuery<bool>.Execute(new {profile.Username});
        if(exists)
        {
            var id = AddPostCommand.Execute(new
            {
                post.Author,
                post.Content,
                post.Timestamp
            });

            var hash = post.Hash();
            AddPostHash(id, hash);
        }
    }

    public void AddPostHash(int id, Bytes32 hash)
    {
        ~@XOn("Desktop"){}

        @XOn("Ethereum", id, hash)
        {
            Post post = Post(id, hash);
            posts[id] = post;
        }
    }

    [XOn("Desktop")]
    public Post GetPost(int id)
    {
        var post = GetPostQuery<Post>.Execute(new {Id = id});
        post.Hash = GetPostHash();
        return profile;
    }

    public Bytes32 GetPostHash(int id)
    {
        ~@XOn("Desktop"){}

        return @XOn("Ethereum", id)
        {
            Post post = posts[id];
            return(post.Hash);
        }
    }

    [XOn("Desktop")]
    public IEnumerable<Post> GetUserPosts(Address publicKey)
    {
        return GetUserPostsQuery<Post>.Execute(new {Id = id});
    }

    [XOn("Desktop")]    
    public void EditPost(Post post)
    {
        bool authorIsCaller = IsPostAuthorMatch<bool>.Execute(new {post.Author});
        if(authorIsCaller)
        {
            EditPostCommand.Execute(new {post.Content});

            var hash = post.Hash();
            EditPostHash(post.Id, hash);
        }
    }

    public void EditPostHash(int id, Bytes32 hash)
    {
        ~@XOn("Desktop"){}

        @XOn("Ethereum", id, hash)
        {
            Post post = posts[id];
            post.Hash = hash;
            posts[id] = post;
        }
    }

    [XOn("Desktop")]
    public void DeletePost(int id)
    {
        bool authorIsCaller = IsPostAuthorMatch<bool>.Execute(new {post.Author});
        if(authorIsCaller)
        {
            DeletePostCommand.Execute(new {Id = id});
        }
    }

    [XOn("Desktop")]
    public void LikePost(int id)
    {
        LikePostCommand.Execute(new {Id = id});
    }
}